{
  "posts": [
    {
      "id": 1,
      "title": "Способи оголошення функцій",
      "body": "У JavaScript функції можна оголосити за допомогою виразів, декларацій або конструкторів об'єктів Function."
    },
    {
      "id": 2,
      "title": "Контекст виклику this",
      "body": "Ключове слово this у JavaScript вказує на об'єкт, до якого відноситься поточний код."
    },
    {
      "id": 3,
      "title": "Callback Functions",
      "body": "Callback Functions у JavaScript використовуються для передачі функції іншій функції як аргумент."
    },
    {
      "id": 4,
      "title": "Наслідування",
      "body": "У JavaScript наслідування можна реалізувати за допомогою прототипів."
    },
    {
      "id": 5,
      "title": "Асинхронне програмування",
      "body": "JavaScript підтримує асинхронне програмування за допомогою колбеків, обіцянок (promises) та async/await."
    },
    {
      "id": 6,
      "title": "Замикання",
      "body": "У JavaScript замикання дозволяють функціям отримувати доступ до змінних з області видимості замикання."
    },
    {
      "id": 7,
      "title": "Робота з DOM",
      "body": "Для взаємодії з HTML-документами JavaScript використовує DOM (Document Object Model), який представляє структуру сторінки як об'єкт."
    },
    {
      "id": 8,
      "title": "Модулі",
      "body": "Модулі в JavaScript дозволяють організувати код у логічні блоки, що підтримує підтримку повторного використання та розділення відповідальностей."
    },
    {
      "id": 9,
      "title": "Event Loop",
      "body": "Event Loop у JavaScript відповідає за управління чергами подій і виконання асинхронного коду."
    },
    {
      "id": 10,
      "title": "Promises",
      "body": "Promises у JavaScript дозволяють обробляти асинхронні операції і обробляти їхні результати або помилки."
    },
    {
      "id": 11,
      "title": "Робота з файлами та HTTP запитами",
      "body": "У JavaScript можна виконувати операції з файлами та виконувати HTTP запити за допомогою вбудованих методів та бібліотек."
    }
  ]
}
